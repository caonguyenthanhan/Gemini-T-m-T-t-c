# -*- coding: utf-8 -*-
"""test_chat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GksAsxcC10DXmzo0_c03VteM32nuMy6U
"""

!pip install requests

import requests
import json
import os

# --- Cấu hình API Key ---
# Vui lòng KHÔNG ĐẶT API KEY TRỰC TIẾP VÀO CODE trong môi trường sản xuất!
# Cách an toàn nhất là lấy API Key từ biến môi trường.
# Ví dụ: Trên Linux/macOS: export GOOGLE_API_KEY="AIzaSy..."
# Trên Windows (PowerShell): $env:GOOGLE_API_KEY="AIzaSy..."
# Hoặc gán trực tiếp CHỈ KHI TEST CỤC BỘ và đảm bảo không chia sẻ code này.
API_KEY = "AIzaSyDOB3DEB0w7cop8INMvNw3iLUh9486sCvU"

# Nếu bạn muốn gán trực tiếp để thử nghiệm nhanh (KHÔNG KHUYẾN KHÍCH CHO SẢN PHẨM):
# API_KEY = "AIzaSyDOB3DEB0w7cop8INMvNw3iLUh9486sCvUY" # Thay bằng API Key thật của bạn

if not API_KEY:
    print("Lỗi: Không tìm thấy khóa API. Vui lòng đặt biến môi trường 'GOOGLE_API_KEY' hoặc gán trực tiếp vào biến API_KEY trong code.")
    exit()

# --- Cấu hình Gemini API Endpoint ---
# Đây là URL chính xác cho Gemini 2.0 Flash generateContent method
API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"

# --- Headers cho yêu cầu API ---
# Đối với Gemini API, API Key thường được truyền qua URL, không phải qua Authorization header.
# Chỉ cần Content-Type là đủ.
headers = {
    "Content-Type": "application/json"
}

def send_message_to_api(message_text):
    """
    Gửi tin nhắn đến Gemini API và nhận phản hồi.
    """
    # Cấu trúc payload cho Gemini API
    # Gemini sử dụng 'contents' thay vì 'messages' và mỗi phần có 'role' và 'parts'
    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": message_text}]}
        ],
        "generationConfig": {
            "maxOutputTokens": 150,  # Giới hạn độ dài phản hồi
            "temperature": 0.7,      # Độ "sáng tạo" của phản hồi (0.0 - 1.0)
            # "topP": 0.9,           # Tùy chọn: Kiểm soát đa dạng của từ được chọn
            # "topK": 40             # Tùy chọn: Giới hạn từ được chọn dựa trên xác suất
        }
    }

    try:
        response = requests.post(API_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()  # Ném lỗi nếu mã trạng thái HTTP là 4xx hoặc 5xx

        response_data = response.json()

        # Kiểm tra cấu trúc phản hồi của Gemini API
        if response_data.get("candidates"):
            # Lấy nội dung text từ phản hồi đầu tiên của candidate đầu tiên
            return response_data["candidates"][0]["content"]["parts"][0]["text"]
        else:
            # Xử lý trường hợp API trả về lỗi hoặc không có candidate
            if response_data.get("error"):
                error_message = response_data["error"].get("message", "Lỗi không xác định từ API.")
                print(f"Lỗi phản hồi API: {error_message}")
            return "Không nhận được phản hồi hợp lệ từ mô hình."

    except requests.exceptions.RequestException as e:
        print(f"Lỗi khi gọi API: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Mã trạng thái HTTP: {e.response.status_code}")
            print(f"Nội dung phản hồi lỗi: {e.response.text}")
        return None
    except json.JSONDecodeError:
        print("Lỗi: Không thể phân tích JSON từ phản hồi API.")
        return None

if __name__ == "__main__":
    print("--- Chương trình gửi tin nhắn đến Gemini API ---")
    print("Nhập 'thoat' để thoát.")

    while True:
        user_input = input("Bạn: ")
        if user_input.lower() == 'thoat':
            break

        print(f"Đang gửi '{user_input}' đến API Gemini...")
        api_response = send_message_to_api(user_input)

        if api_response:
            print(f"AI Gemini: {api_response}")
        else:
            print("Không thể nhận được phản hồi từ AI Gemini.")

    print("--- Kết thúc chương trình ---")